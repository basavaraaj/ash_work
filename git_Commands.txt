git hub
basavaraajsm@gmail.com
Start!123

create repo
git@github.com:basavaraaj/ash_work.git

create ssh key
$ ssh-keygen -t rsa -b 4096 -C "basavaraajsm@gmail.com"

copy key
$ clip < ~/.ssh/id_rsa.pub

update the key


$ git rm --cached readme.txt
$ git mv readme.txt to A_readme.txt 
$ git rm log/\*.log
$ git rm \*~
$ git commit -a (commit the files directly without staging them)
$ git log -p (or --patch, which shows the difference (the patch output) introduced in each commit. You can also limit the number of log entries )

# git log --pretty=oneline
git log -S functiona_name
git log --since=2.weeks

Table 2. Common options to git log Option Description -p Show the patch introduced with each commit.
 --stat Show statistics for files modified in each commit. 
 --shortstat Display only the changed/insertions/deletions line from the --stat command. 
 --name-only Show the list of files modified after the commit information. 
 --name-status Show the list of files affected with added/modified/deleted information as well. 
 --abbrev-commit Show only the first few characters of the SHA-1 checksum instead of all 40. 
 --relative-date Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format. 
 --graph Display an ASCII graph of the branch and merge history beside the log output. 
 --pretty Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format). 
 --oneline Shorthand for --pretty=oneline --abbrev-commit used together.

Table 3. Options to limit the output of git log Option Description 
-<n> Show only the last n commits --since, --after Limit the commits to those made after the specified date. 
--until, --before Limit the commits to those made before the specified date. 
--author Only show commits in which the author entry matches the specified string.
Option Description 
--committer Only show commits in which the committer entry matches the specified string. 
--grep Only show commits with a commit message containing the string 
-S Only show commits adding or removing code matching the string

to skip the merge commits
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \    --before="2008-11-01" --no-merges -- t

to re correct the pe=articular file from this commit, you can do something like this:
$ git commit -m 'initial commit' 
$ git add forgotten_file 
$ git commit --amend

$ git add * (to add all the files for the commit)
$ git reset HEAD command.txt to unstage fie from the staging area

unmodifying the modified file
git checkout -- command.txt

to know which remote server we are pointing the moment
$ git remote -v

to add the remote repo for the first time
$ git remote add 'branch' https://github/basava_repo/basava_git

to get the data from the remote repositories
$ git fetch
$ git fetch origin 
			(If you clone a repository, the command automatically adds that remote repository under the name “origin”. 
			So, git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. 
			It’s important to note that the git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. 
			You have to merge it manually into your work when you’re ready.)

(If your current branch is set up to track a remote branch (see the next section and [_git_branching#_git_branching] 
for more information), you can use the git pull command to automatically fetch and then merge that remote branch into
 your current branch. This may be an easier or more comfortable workflow for you; and by default, the git clone command 
 automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) 
 on the server you cloned from. Running git pull generally fetches data 
from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on.)
$ git pull

$ git push  origin master
$ git push <remote> <branch>

to check the status of the remote server
$ git remote show origin

to rename the remote server short name
$ git remote rename pb paul

to remove the remote server
$ git remote rm/remove

to list all the tags
$ git tag -l/list
$ git tag 'V1.0.0' to search with the particular tag name

Tags
Annotted tag (tag with all info like who creates it name, mail, message get stores in the git database, commit checksum store in in the git database)
lightweight tag (like brnach) (commit checksum store in in the git file system)

Annotted tag creation
$ git tag -a V1 -m 'first temporary tag'
to show tag
$ git show V1

light weight tag
$ git tag V1 (no -a, -m -s)

tagging later
$ git tag -a V1 'checksum(give id)' to tag the later

to push the Tags to the remote servers
$ git push origin V1 (tag name)
$ git push origin --tags
$ git checkout V1


Branching in GIT
git log --oneline --decorate to show the complete branch details
git checkout -b branchName (to create new branch)
git checkout branchName (to switch to branch)
git branch -d hotfix (to delete the hotfix branch)

$ git branch (to list the branched and current branch u r pointing to with * at the beginning)
To see the last commit on each branch, you can run 
$ git branch -v:

The useful --merged and --no-merged options can filter this list to branches that you have or have not yet merged into the branch you’re currently on. To see which branches are already merged into the branch you’re on, you can run git branch --merged:
$ git branch --merged
to see the branch which not merged 
$ git branch --no-merged
The options described above, --merged and --no-merged will, if not given a commit or branch name as an argument, show you what is, respectively, merged or not merged into your current branch.
$ git branch --no-merged master

You can get a full list of remote references explicitly with git ls-remote [remote],
 or git remote show [remote] for remote branches as well as more information
 
$ git fetch origin to fetch the changes from the origin branch

to push to the remote server
$ git push origin feature/ALM-334

Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix'
$ git checkout -b serverfix origin/serverfix 

to track the branches were remote is pointing too
$ git checkout --track origin/serverfix

to check out the remote branch locally with different name
$ git checkout -b sf origin/serverfix

If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you’re tracking, you can use the -u or --set-upstream-to option to git branch to explicitly set it at any time.
$ git branch -u origin/serverfix

Upstream shorthand When you have a tracking branch set up, you can reference its upstream branch with the @{upstream} or @{u} shorthand. So if you’re on the master branch and it’s tracking origin/master, you can say something like git merge @{u} instead of git merge origin/master if you wish.
$ git merge @{u} instead of $ git merge origin/master

to list out the what tracking branches we have set up.
$ git branch -vv
If you want totally up to date ahead and behind numbers, you’ll need to fetch from all your remotes right before running this. You could do that like this:
$ git fetch --all; git branch -vv

to delete to remote branches from the servers 
$ git push origin --delete serverflix

To rebase the local master branch to C4, then run
$ git rebase master. now C4 will have all the chnaes

then merge with C3G
$ git merge experiement(C4)

$ git rebase --onto master server client
first apply changes from client to from master  from the point where exactly its diverged from the server. then call the
$ git checkout master
$ git merge client  on the master will merge the client changes into master.
now want to rebase the sever branch then call
$ git rebase master sever  This replays your server work on top of your master work
then merge the sever to master
$ git checkout master 
$ git merge server
$ git pull --rebase to full only the rebased chnages
If you are using git pull and want to make --rebase the default, you can set the pull.rebase config value with something like git config --global pull.rebase true.
***If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you’ll be fine. If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates
In general the way to get the best of both worlds is to rebase local changes you’ve made but haven’t shared yet before you push them in order to clean up your story, but never rebase anything you’ve pushed somewhere.


Git command line related commands:

